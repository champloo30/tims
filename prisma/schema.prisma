// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  // user info
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  username        String?       @unique
  email           String?       @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  followers       String[]      @db.ObjectId
  following       String[]      @db.ObjectId

  //post relation info
  likedPosts      String[]      @db.ObjectId
  savedPosts      String[]      @db.ObjectId
  likedComments   String[]      @db.ObjectId
  myPosts         String[]      @db.ObjectId

  //profile info
  bio             String?
  website         String?
  facebook        String?
  instagram       String?
  linkedin        String?
  tiktok          String?
  twitter         String?
  youtube         String?

  //relations
  role            Role          @default(USER)
  accounts        Account[]
  posts           Post[]
  comments        Comment[]
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  userId              String    @db.ObjectId
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?   @db.String
  access_token        String?   @db.String
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?   @db.String
  session_state       String?

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  //post info
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String?
  content       String
  draft         Boolean?
  anonymous     Boolean?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  likingUsers   String[]    @db.ObjectId
  savingUsers   String[]    @db.ObjectId
  userId        String      @db.ObjectId     

  //relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments      Comment[]
}

model Comment {
  //comment info
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  body          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  replies       String[]    @db.ObjectId
  likingUsers   String[]    @db.ObjectId
  userId        String      @db.ObjectId
  postId        String      @db.ObjectId

  // relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  post          Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
}
