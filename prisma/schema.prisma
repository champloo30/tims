// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  username        String?     @unique
  email           String?     @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  role            Role        @default(USER)
  profile         Profile?
  accounts        Account[]
  posts           Post[]
}

model Profile {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  bio           String?
  website       String?
  facebook      String?
  instagram     String?
  linkedin      String?
  tiktok        String?
  twitter       String?
  youtube       String?
  userId        String    @db.ObjectId @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  userId              String    @db.ObjectId
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?   @db.String
  access_token        String?   @db.String
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?   @db.String
  session_state       String?

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Post {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  authorId    String      @db.ObjectId
  slug        String      @unique
  title       String?
  body        String

  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  postId    String    @db.ObjectId
  comment   String

  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}
